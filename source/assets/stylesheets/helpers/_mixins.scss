/**
 * _mixins.scss
 *
 * @author    Matthew White <matt@substructu.re>
 * @date      2014-08-26
 *
 * This is the core SASS mixin library.  Each particular mixin has it's own 
 * description and usage notes below.
 */


/**
 * ⌂-background
 *
 * Sets a solid or semi-transparent background color.  Accepts an optional 
 * opacity (alpha) value.  Provides a solid color fallback.
 */
@mixin ⌂-background($color, $alpha: 1) {
  background: $color;
  background: rgba($color, $alpha);
}


/**
 * ⌂-clear
 *
 * Multi-use clear mixin for various contexts.  Accepts an optional context.
 * Default usage implements a Bourbon micro-clearfix.
 */
@mixin ⌂-clear($element: self) {

  @if $element == self {
    @include clearfix;
  }

  @if $element == header {
    @include padding($height-header-palm null null null);

    @include media($mq-lap) {
      @include padding($height-header-lap null null null);
    }

    @include media($mq-desk) {
      @include padding(0 null null null);
    }
  }
}


/**
 * ⌂-container
 *
 * Declares a container around elements sized with Neat's span-columns mixin.  
 * Accepts an optional argument - pseudo - for use on containers that cannot
 * be margined (e.g. full screen video/imagery).
 */
@mixin ⌂-container($type: outer) {

  @if $type == outer {
    @include clearfix;
    @include margin(null auto null auto);
    position: relative;
    width: $width-palm;
    max-width: $width-palm-max;
    @include media($mq-lap) {
      width: $width-lap;
      max-width: $width-lap-max;
    }
    @include media($mq-desk) {
      width: $width-desk;
      max-width: $width-desk-max;
    }
    @include media($mq-wall) {
      width: $width-wall;
      max-width: $width-wall-max;
    }
  }

  @if $type == pseudo {
    @include clearfix;
    padding-left:2.5%;
    padding-right:2.5%;
  }
}


/**
 *
 * ⌂-copy
 *
 * Implements standardized site copy. Accepts arguments for
 * variants (inversions, etc.).
 *
 */
@mixin ⌂-copy($variant: default) {
  font-size: em(14);
  line-height: em(28, 14);
}

@mixin ⌂-rte {
  p {
    font-size: em(14);
    line-height: em(24, 14);
    @include margin(null null 1em null);

    &:last-child {
      @include margin(null null 0 null);
    }
  }
}

@mixin ⌂-font-face($font-family, $file-path, $query-string, $weight: normal, $style: normal) {
  @font-face {
    font-family: $font-family;
    font-weight: $weight;
    font-style: $style;

    @if $query-string == '' {
      src: url('#{$file-path}.eot');
      src: url('#{$file-path}.eot?#iefix')               format('embedded-opentype'),
           url('#{$file-path}.woff')                     format('woff'),
           url('#{$file-path}.ttf')                      format('truetype'),
           url('#{$file-path}.svg##{$font-family}')      format('svg');
    }
    @else {
      src: url('#{$file-path}.eot?#{$query-string}');
      src: url('#{$file-path}.eot?#{$query-string}#iefix')            format('embedded-opentype'),
           url('#{$file-path}.woff?#{$query-string}')                 format('woff'),
           url('#{$file-path}.ttf?#{$query-string}')                  format('truetype'),
           url('#{$file-path}.svg?#{$query-string}##{$font-family}')  format('svg');
    }
  }
}


/**
 * ⌂-heading
 *
 * Implements a site standardized heading. Accepts a single
 * argument for heading level.
 *
 */
@mixin ⌂-heading($level) {
  @if $level == 1 {
    text-transform: uppercase;
    @extend %font-weight-bold;
    color: $color-text-heading;
    font-size: em(28);
  }

  @if $level == 2 {
    font-size: em(20);
    color: $color-text-invert;
    @include margin(1em null 1em null);
  }

  @if $level == 3 {
    font-size: em(18);
    line-height: em(32,18);
  }

  @if $level == 4{
    text-transform: uppercase;
    @extend %font-weight-bold;
    color: $color-text-heading;
    font-size: em(16);
  }
}


/**
 * ⌂-hide-text
 *
 * Hides text of applied element.  Accepts no arguments. Based
 * off of a previous version of the H5BP image replacement 
 * method.  I've found it to be far more reliable than the clip
 * method.
 *
 */
@mixin ⌂-hide-text {
  font: 0/0 a;
  text-shadow: none;
  color: transparent;
}

/**
 * ⌂-icon
 *
 * Implements a webfont glyph (typically Fontello).  Needs to be used within
 * a pseudo element (e.g. &:before, &:after).  Accepts a required, named
 * icon, an optional size, and an optional color.  Available icons can be
 * modified by adding directly to the $icons map stack.
 */
@mixin ⌂-icon($icon, $size: 16, $color: $color-text) {
  $icons: (
    search: '\e800',
    mail-alt: '\e801',
    mail-squared: '\e802',
    user: '\e803',
    users: '\e804',
    cancel: '\e805',
    cancel-circled: '\e806',
    plus: '\e807',
    plus-circled: '\e808',
    minus: '\e809',
    minus-circled: '\e80a',
    help: '\e80b',
    help-circled: '\e80c',
    info-circled: '\e80d',
    info: '\e80e',
    link-ext: '\e80f',
    quote-left: '\e810',
    quote-right: '\e811',
    share: '\e812',
    share-squared: '\e813',
    print: '\e814',
    comment: '\e815',
    attention-alt: '\e816',
    attention-circled: '\e817',
    location: '\e818',
    file-pdf: '\e819',
    file-word: '\e81a',
    file-excel: '\e81b',
    file-powerpoint: '\e81c',
    file-image: '\e81d',
    file-archive: '\e81e',
    file-video: '\e81f',
    file-audio: '\e820',
    file-code: '\e821',
    rss: '\e822',
    rss-squared: '\e823',
    phone: '\e824',
    phone-squared: '\e825',
    menu: '\e826',
    cog: '\e827',
    down-dir: '\e828',
    up-dir: '\e829',
    right-dir: '\e82a',
    left-dir: '\e82b',
    down-open: '\e82c',
    left-open: '\e82d',
    right-open: '\e82e',
    up-open: '\e82f',
    angle-left: '\e830',
    angle-right: '\e831',
    angle-up: '\e832',
    angle-down: '\e833',
    angle-circled-left: '\e834',
    angle-circled-right: '\e835',
    angle-circled-up: '\e836',
    angle-circled-down: '\e837',
    angle-double-left: '\e838',
    angle-double-right: '\e839',
    angle-double-up: '\e83a',
    angle-double-down: '\e83b',
    down-big: '\e83c',
    left-big: '\e83d',
    right-big: '\e83e',
    up-big: '\e83f',
    left-circled: '\e840',
    right-circled: '\e841',
    up-circled: '\e842',
    down-circled: '\e843',
    play: '\e844',
    play-circled: '\e845',
    desktop: '\e846',
    laptop: '\e847',
    tablet: '\e848',
    mobile: '\e849',
    circle: '\e84a',
    circle-empty: '\e84b',
    dot-circled: '\e84c',
    credit-card: '\e84d',
    sort: '\e84e',
    drupal: '\e84f',
    facebook: '\e850',
    facebook-squared: '\e851',
    gplus: '\e852',
    gplus-squared: '\e853',
    instagramm: '\e854',
    linkedin: '\e855',
    linkedin-squared: '\e856',
    pinterest-circled: '\e857',
    pinterest-squared: '\e858',
    twitter-squared: '\e859',
    twitter: '\e85a',
    youtube: '\e85b',
    youtube-squared: '\e85c',
    youtube-play: '\e85d',
    ok-circled: '\e85e',
    ok: '\e85f',
    basket: '\e860',
    globe: '\e861',
    truck: '\e862',
    lock: '\e863'
  );

  display: inline-block;
  content: map-get($icons, $icon);
  font-family: "fontello";
  font-size: em(strip-units($size));
  font-variant: normal;
  text-align: center;
  text-transform: none;
  color: $color;
}


/**
 * ⌂-layer
 *
 * Sets a z-index value based on semantic naming as opposed to explicit integer
 * values.  Accepts a required, named layer.  Hierarchy can be modified by
 * adding directly to the $layers map stack.
 */
@mixin ⌂-layer($layer) {
  $layers: (
    roof: 3000,
    loft: 2000,
    ground: 1000,
    basement: -1
  );

  z-index: map-get($layers, $layer);
}

/**
 *
 * ⌂-button
 *
 * Styles an element to a site specific button.  Accepts an
 * argument for button variants.
 *
 */
@mixin ⌂-button($variant) {
  @extend %reset-button;
  display: inline-block;

  @if $variant == icon {
  }
}

@mixin ⌂-pattern($pattern, $modifier, $context) {

  @if $pattern == 'tile' {

    @if $modifier == 'image-left' {

      @if $context == 'desk' {

        @include media($mq-desk) {

          .tile__image {
            @include size(200px);
            padding-bottom:0;
            background-position:50% 50%;
            display: table-cell;
            border-bottom: none;
            border-right: 1px solid $color-border;
          }

          .tile__content {
            display: table-cell;
          }
        }
      }
    }
  }
}
